@startuml
'https://plantuml.com/class-diagram


enum ButtonState {
    IDLE,
    HOVER,
    ACTIVE
}

'class Window
'class MainWindow
'
'class Application
'class Game
'class Menu
'
'class Tank
'class Bullet
'
'class SimpleBullet
'class SimpleBulletColorComponent
'
'class TankMoveComponent
'class TankSpinComponent
'class TankShootComponent
'class TankColorComponent
'
'class Animation
'class AnimationDeath
'
'
'class Object
'class SolidBody
'
'
'class MoveUpCommand
'class MoveDownCommand
'class ShootCommand
'class SpinAntiClockwiseCommand
'class SpinClockwiseCommand
'class MoveController
'
'class KeyAssignments
'
'class Field
'class BackGround
'class Obstacle
'class GameField
'class Ground
'
'class Subject
'
'class Button
'class ButtonWithPressedText
'
'class HealthBar
'
'class PauseMenu
'class MainMenu

Application *---- IApplicationState
Application *---- MainWindow

Game *---- GameField
Game *----"2" Tank
Game *----"2" HealthBar
Game *---- PauseMenu
Game ----> Application
Game ----> "2" MoveController : "Управление танками"

Menu *---- MainMenu
Menu ----> Application

MainMenu *---- ButtonWithPressedText
MainMenu *---- Object

PauseMenu *----"3" ButtonWithPressedText

Subject o---- IObserver
Tank ----> Subject
Tank *---- KeyAssignments
Tank *---- TankMoveComponent
Tank *---- TankSpinComponent
Tank *---- TankShootComponent
Tank *---- TankColorComponent
Tank *---- AnimationDeath

Animation ---->"N" Object

TankShootComponent *---- Bullet
TankShootComponent o---- TankMoveComponent

SimpleBullet *---- SimpleBulletColorComponent

HealthBar *---- "5" Object

MoveController ----> Tank
KeyAssignments *----"N" Command

Command ----> Tank

Field *---- "N" Object

Button ----> ButtonState

GameField *---- BackGround
GameField *---- BackObstacles


interface IApplicationState {
    + void UpdateEvents(Application *application, float delta_time)
    + void Update(Application *application, float delta_time)
    + void Render(Application *application)
}
interface ICollided{
  + bool IsCollide(const SolidBody *collided_object)
  + void ActionOnCollision(SolidBody *collided_object)
  + bool IsCollide(const sf::FloatRect &collided_object)
  + void ActionOnCollision(const sf::FloatRect &collided_object)
}
interface IHitable {
    + void Hit(unsigned int damage)
}
interface IMovable {
    + void Move(const sf::Vector2f &direct, float delta_time)
}
interface IRendered {
    + void Render(sf::RenderWindow *render_window)
}
interface IShootable {
    + void Shot(float delta_time)
}
interface ISpinnable {
    + void Spin(float angle, float delta_time)
}
interface IUpdatable {
    + void Update(float delta_time)
}
interface IObservable {
    + void Add(IObserver *observer)
    + void Remove(IObserver *observer)
    + void Notify()
}
interface IObserver extends IRendered {
    + void Update()
}

class SolidBody extends Object implements ICollided {
  + bool IsCollide(const SolidBody *collided_object)
  + bool IsCollide(const sf::FloatRect &collided_object)
}

class Window {
  # sf::RenderWindow *render_window_

  + Window(const sf::VideoMode &video_mode, const sf::String &title)
  + sf::RenderWindow *GetRenderWindow()
}

class MainWindow extends Window {
    + MainWindow(unsigned short fps = 60, bool vertical_sync = true)
}

class Subject implements IObservable {
  - std::list<IObserver *> observers

  + Subject()

  + void Add(IObserver *observer)
  + void Remove(IObserver *observer)
  + void Notify()
}

class Application {
  -MainWindow *main_window_;

  -sf::Clock delta_clock_;
  -float delta_time_;

  -IApplicationState *state_;

  -Application();

  -void UpdateDeltaTime();
  -void InitMainWindow();

  +MainWindow *GetWindow();
  +IApplicationState *GetState() const;
  +void SetState(IApplicationState *state);

  +Application(const Application &) = delete;
  +Application &operator=(const Application &) = delete;
  {static} +Application &Instance();

  +void Run();
}

class MainMenu implements IRendered{
      - sf::Font *font_;
    
      - sf::Text *title_;
      - Object *background_;
      - ButtonWithPressedText *run_game_;
    
      - void SetUpButtons();
      - void SetUpBackGround();
      - void SetUpFont();
      
      + MainMenu();
    
      + sf::Font *GetFont() const;
      + sf::Text *GetTitle() const;
      + Object *GetBackground() const;
      + ButtonWithPressedText *GetRunGame() const;
    
      + void Render(sf::RenderWindow *render_window) override;
      + void Update(const sf::Vector2i &mouse_position);
}
class Menu implements IApplicationState {
    - MainMenu *main_menu_;

    + Menu();

    + void Update(Application *application, float delta_time) override;
    + void Render(Application *application) override;
    + void UpdateEvents(Application *application, float delta_time) override;
}

class Game implements IApplicationState {
  - GameField *game_field;

  - Tank *tank_1
  - Tank *tank_2
  - HealthBar *health_bar_1
  - HealthBar *health_bar_2

  - PauseMenu *pause_menu

  - bool is_paused

  + Game()

  + bool IsPaused() const
  + void SetIsPaused(bool is_paused)

  + void Update(Application *application, float delta_time)
  + void Render(Application *application)
  + void UpdateEvents(Application *application, float delta_time)

  + void UpdateTanks(float delta_time)
  + void RenderTanks(Window *window)
  + void RenderHealthBars(Window *window)
  + void RenderGameField(Window *window)
  + void RenderPauseMenu(Window *window)

  + void InitPauseMenu()
  + void InitTanks()
  + void InitGameField()
  + void InitHealthBars()
}

class TankMoveComponent implements IMovable {
- sf::Sprite *sprite_;

- sf::Vector2f direct_;
- float movement_speed_;

- void Move(const sf::Vector2f &direct, float delta_time) override;
+ TankMoveComponent(sf::Sprite *sprite, float movement_speed);

+ void UpdateDirect();

+ void MoveUp(float delta_time);
+ void MoveDown(float delta_time);

+  sf::Sprite *GetSprite() const;
+  const sf::Vector2f &GetDirect() const;
+  float GetMovementSpeed() const;
+ void SetMovementSpeed(float movement_speed);
}
class TankSpinComponent implements ISpinnable {
  - sf::Sprite *sprite_;
  - float angel_;

  - void Spin(float angle, float delta_time) override;

  + TankSpinComponent(sf::Sprite *sprite, float angel);

  + void SpinClockwise(float delta_time);
  + void SpinAntiClockwise(float delta_time);

  + sf::Sprite *GetSprite() const;
  + float GetAngle() const;
  + void SetAngel(float angel);
}
class TankShootComponent implements IShootable, IUpdatable, IRendered{
  - std::unique_ptr<Bullet> bullet_ = nullptr;
  - float duration_;
  - float time_last_shoot_;
  - sf::Clock clock_;

  - sf::Color color_;

  - TankMoveComponent *move_component_;
  + TankShootComponent(TankMoveComponent *move_component,
							  const sf::Color &color,
							  float duration = 2);

  + const std::unique_ptr<Bullet> &GetBullet() const;
  + float GetDuration() const;
  + float GetTimeLastShoot() const;
  + const sf::Clock &GetClock() const;

  + void Shot(float delta) override;
  + void DeleteBullet();

  + void Render(sf::RenderWindow *render_window) override;
  + void Update(float delta_time) override;
}
class TankColorComponent {
    + void SetColor(sf::Sprite *sprite, const sf::Color &color);
}
class SimpleBulletColorComponent {
    + void SetColor(sf::Sprite *sprite, const sf::Color &color);
}

class Animation implements IRendered, IUpdatable{
 # float speed_animation_;
 # std::vector<Object *> animations_;

 + Animation(const float speed_animation) : speed_animation_(speed_animation) {}
}

class AnimationDeath extends Animation implements IMovable {
  - const float step_scale_size_ = 0.001;

  - float movement_speed_y_ = 50;
  - const int count_animations_ = 100;

  - bool is_finished_;
  - bool is_started_;

  - Object *CreateObject(const sf::Color &color);

  - void Move(const sf::Vector2f &direct, float delta_time) override;
  - void MoveUp(float delta_time);

  + AnimationDeath(const sf::Color &color);

  + bool IsFinished() const;
  + bool IsStarted() const;

  + void Run(const sf::Vector2f &appearance_position);

  + void Render(sf::RenderWindow *render_window) override;
  + void Update(float delta_time) override;
}

class Tank implements SolidBody, IRendered, IUpdatable, IHitable, IShootable {
        - TankMoveComponent *move_component_;
        - TankSpinComponent *spin_component_;
        - TankShootComponent *shoot_component_;
        - TankColorComponent color_component_;

        - bool is_alive_;
        - unsigned int health_;
        - sf::Color color_;

        - KeyAssignments *key_assignments_;

        - AnimationDeath *animation_death_;

        - void SetUpComponents(const sf::Color &color);
        - void SetUpSettings();

        + Subject on_getting_damage;

        + Tank(sf::Color color, KeyAssignments key_assignments);

        + bool IsAlive()
        + Bullet *GetBullet()
        + KeyAssignments *GetKeyAssignments()

        + void Render(sf::RenderWindow *render_window)
        + void Update(float delta_time)

        + void MoveUp(float delta_time)
        + void MoveDown(float delta_time)
        + void SpinClockwise(float delta_time)
        + void SpinAntiClockwise(float delta_time)
        + void Shot(float delta_time) override
        + void DeleteBullet()

        + void ActionOnCollision(SolidBody *collided_object)
        + void ActionOnCollision(const sf::FloatRect &collided_object)

        + void Hit(unsigned int damage) override;
}

abstract Command {
    # sf::Keyboard::Key key;

    # Command(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)

    + sf::Keyboard::Key GetKey() const
}
class KeyAssignments {
  - Command *move_up_;
  - Command *move_down_;
  - Command *spin_clockwise_;
  - Command *spin_anti_clockwise_;
  - Command *shot_;

  + KeyAssignments(sf::Keyboard::Key move_up,
				 sf::Keyboard::Key move_down,
				 sf::Keyboard::Key spin_clockwise,
				 sf::Keyboard::Key spin_anti_clockwise,
				 sf::Keyboard::Key shot);

  + Command *GetMoveDown() const;
  + void SetMoveDown(Command *move_down);

  + Command *GetMoveUp() const;
  + void SetMoveUp(Command *move_up);

  + Command *GetSpinClockwise() const;
  + void SetSpinClockwise(Command *spin_clockwise);

  + Command *GetSpinAntiClockwise() const;
  + void SetSpinAntiClockwise(Command *spin_anti_clockwise);

  + Command *GetShot() const;
  + void SetShot(Command *shot);

  + Command *GetCommandByKey(sf::Keyboard::Key key);
}
class MoveUpCommand extends Command {
    + MoveUpCommand(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)
}
class MoveDownCommand extends Command {
    + MoveDownCommand(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)
}
class ShootCommand extends Command{
    + ShootCommand(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)
}
class SpinAntiClockwiseCommand extends Command {
    + SpinAntiClockwiseCommand(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)
}
class SpinClockwiseCommand extends Command {
    + SpinClockwiseCommand(sf::Keyboard::Key key)

    + void Execute(Tank *tank, float delta_time)
}
class MoveController {
    {static} + void Processing(Tank *tank, float delta_time)
}

class Object {
  # sf::Image image
  # sf::Texture texture
  # sf::Sprite sprite

  + Object(const sf::Image &image, const sf::Texture &texture, const sf::Sprite &sprite);
  + Object()

  + sf::Image &GetImage()
  + sf::Texture &GetTexture()
  + sf::Sprite &GetSprite()
  + void SetImage(const sf::Image &image)
  + void SetTexture(const sf::Texture &texture)
  + void SetSprite(const sf::Sprite &sprite)

  + sf::Image &GetLinkImage()
  + sf::Texture &GetLinkTexture()
  + sf::Sprite &GetLinkSprite()
}

class Ground extends Object {
    + Ground()
}

class Field implements ICollided {
  # std::unique_ptr<std::vector<std::vector<Object *>>> field_
}
class Obstacle extends SolidBody {
    + Obstacle()
    + void ActionOnCollision(SolidBody *collided_object)
    + void ActionOnCollision(const sf::FloatRect &collided_object)
}
class BackGround implements Field, IRendered {
  -std::unique_ptr<std::vector<std::vector<Object *>>> FillField();

  + BackGround()
  + void Render(sf::RenderWindow *render_window)
  + bool IsCollide(const SolidBody *collided_object)
  + bool IsCollide(const sf::FloatRect &collided_object)
  + void ActionOnCollision(SolidBody *collided_object)
  + void ActionOnCollision(const sf::FloatRect &collided_object)
}

class BackObstacles implements Field, IRendered {
  - std::vector<std::pair<int, int>> filled_cells;

  - sf::FloatRect float_rect

  - std::unique_ptr<std::vector<std::vector<Object *>>> CreateObstacles();
  - void RandomFill(unsigned int count);

  + BackObstacles()

  + const sf::FloatRect &GetFloatRect()

  + void Render(sf::RenderWindow *render_window)
  + bool IsCollide(const SolidBody *collided_object)
  + void ActionOnCollision(SolidBody *collided_object)
  + bool IsCollide(const sf::FloatRect &collided_object)
  + void ActionOnCollision(const sf::FloatRect &collided_object)

  + Obstacle *GetIndexCollide(const SolidBody *collided_object)
  + Obstacle *GetIndexCollide(const sf::FloatRect &collided_object)
}

class GameField implements IRendered {
    - BackGround *back_ground
    - BackObstacles *back_obstacles

    + GameField()

    + void Render(sf::RenderWindow *render_window)

    + BackGround *GetBackGround()
    + BackObstacles *GetBackObstacles()
}

class Button extends IRendered {
  # ButtonState stаte

  + sf::RectangleShape *rectangle_shape
  + sf::Text *text

  + sf::Color idle_color
  + sf::Color hover_color
  + sf::Color active_color

  + Subject *on_click
  + Subject *on_hover
  + Subject *on_active

  + Button()

  + void SetState(ButtonState state)
  + ButtonState GetState()

  + void SetUpRectangleShape()
  + void SetUpText()
  + void SetUpColors()
  + void SetUpSubjects()

  + void Render(sf::RenderWindow *render_window)
  + void Update(const sf::Vector2i &mouse_position)

}

class HealthBar implements IObserver {
  {static} const int count_health_
  std::vector<Object *> bars_

  + int index_current_sprite_

  + void FillBars(const sf::Color &color, const sf::Vector2f &position)

  + HealthBar(const sf::Color &color, const sf::Vector2f &position)

  + void Update()
  + void Render(sf::RenderWindow *render_window)
}

class Bullet extends SolidBody implements IMovable, ISpinnable, IRendered, IUpdatable {
  # unsigned int damage_;
  # float flight_speed_;
  # bool is_launched_;

  # sf::Vector2f direct_;

  # Bullet(unsigned int damage, float flight_speed, const sf::Vector2f &direct)

  + bool IsLaunched() const;
  + unsigned int GetDamage() const;
  + const sf::Vector2f &GetDirect() const;

  + void SetIsLaunched(bool is_launched);
}

class SimpleBullet extends Bullet {
      + void Move(const sf::Vector2f &direct, float delta_time) override;
      + void Spin(float angle, float delta_time) override;

      + SimpleBullet(const sf::Vector2f &start_launch,
    			   float angel_launch,
    			   const sf::Vector2f &direct);

      + void Render(sf::RenderWindow *render_window) override;
      + void Update(float delta_time) override;

      + void ActionOnCollision(const sf::FloatRect &collided_object) override;
      + void ActionOnCollision(SolidBody *collided_object) override;
}

class PauseMenu implements IRendered {
  - float distance_between_buttons_ = 10;
  - float left_margin_ = 10;
  - float right_margin_ = 10;
  - float up_margin_ = 10;
  - float down_margin_ = 10;
  - std::vector<Button *> buttons_;
  - sf::Font *font_;
  - sf::Vector2f position_

  + on_resume;
  + on_main_menu;
  + on_unpause_;

  + PauseMenu(const sf::Vector2f &position);

  - void SetUpFont();
  - void SetUpButtons();

  + void RenderAllButtons(sf::RenderWindow *render_window)
  + void UpdateAllButtons(const sf::Vector2i &mouse_position)
  + void Render(sf::RenderWindow *render_window) override
  + void Update(const sf::Vector2i &mouse_position);

}

class ButtonWithPressedText extends Button{
  + void Render(sf::RenderWindow *render_window)
  + void Update(const sf::Vector2i &mouse_position)
}
@enduml